@using Microsoft.AspNetCore.Identity
@using Project.Models
@using Project.Components

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@{
    var user = await UserManager.GetUserAsync(User);
}

<ul class="navbar-nav">
    @if (SignInManager.IsSignedIn(User))
    {
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello
                @User.Identity?.Name!</a>
        </li>
        <li class="nav-item">
            <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout"
                asp-route-returnUrl="@Url.Page("/Index", new { area = "" })">
                <button type="submit" class="nav-link btn btn-link text-dark">Logout</button>
            </form>
        </li>
        <li>
            <a class="nav-item" asp-page="/Checkout">
                <div class="btn btn-outline-dark">
                    Cart
                    @if (user != null)
                    {
                        @(await Html.RenderComponentAsync<CartItemCounter>(RenderMode.Server))
                    }
                    else
                    {
                        <span class="badge bg-dark text-white ms-1 rounded-pill">
                            0
                        </span>
                    }
                </div>
            </a>
        </li>
    }
    else
    {
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Register">Register</a>
        </li>
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Login">Login</a>
        </li>
    }
</ul>
