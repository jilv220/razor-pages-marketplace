@page "/test"
@* Have to declare this to enable SSR *@
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Project.Data
@using Project.Models
@using Project.Services

@inject ApplicationDbContext DbContext
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CartService CartService

@code {
    public IList<Product> Products { get; set; }
    public IList<string> Categories { get; set; }
    private Cart? Cart { get; set; }
    private bool isUserSignedIn { get; set; } = false;
    private string selectedCategory { get; set; } = "All";
    private string searchTerm { get; set; } = string.Empty;
    private bool isPriceAscending { get; set; } = true;
    private bool isInStock { get; set; } = false;
    private double minPrice { get; set; }
    private double maxPrice { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Categories = await DbContext.Products.Select(p => p.Type).Distinct().ToListAsync();
        await LoadProductsAsync();
        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;

        if (!(user == null || user.Identity == null || user.Identity.Name == null))
        {
            isUserSignedIn = true;
        }
    }

    private async Task LoadProductsAsync()
    {
        var query = DbContext.Products.AsQueryable();

        if (selectedCategory != "All")
        {
            query = query.Where(p => p.Type == selectedCategory);
        }

        if (!string.IsNullOrEmpty(searchTerm))
        {
            query = query.Where(p => p.Name.Contains(searchTerm));
        }
        if (minPrice > 0)
        {
            query = query.Where(p => (double)p.UnitPrice >= minPrice);
        }

        if (maxPrice > 0)
        {
            query = query.Where(p => (double)p.UnitPrice <= maxPrice);
        }

        query = isInStock ? query.Where(p => p.QtyInStock > 0) : query.Where(p => p.QtyInStock == 0);

        query = isPriceAscending ? query.OrderBy(p => (double)p.UnitPrice) : query.OrderByDescending(p => (double)p.UnitPrice);

        Products = await query.ToListAsync();
    }

    private async Task AddToCartAsync(int productId)
    {
        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;

        if (user == null || user.Identity == null || user.Identity.Name == null)
        {
            Navigation.NavigateTo("/Identity/Account/Login");
            return;
        }

        await CartService.AddToCartAsync(user.Identity.Name, productId);
    }

    private async Task OnCategoryChanged(ChangeEventArgs e)
    {
        selectedCategory = e.Value.ToString();
        await LoadProductsAsync();
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        await LoadProductsAsync();
    }

    private async Task OnSortOrderChanged()
    {
        isPriceAscending = !isPriceAscending;
        await LoadProductsAsync();
    }

    private async Task OnStockChanged()
    {
        isInStock = !isInStock;
        await LoadProductsAsync();
    }

    private async Task OnMinPriceChanged(ChangeEventArgs e)
    {
        if (double.TryParse(e.Value.ToString(), out double value))
        {
            minPrice = value;
            await LoadProductsAsync();
        }
    }

    private async Task OnMaxPriceChanged(ChangeEventArgs e)
    {
        if (double.TryParse(e.Value.ToString(), out double value))
        {
            maxPrice = value;
            await LoadProductsAsync();
        }
    }
}

<header class="bg-dark py-5">
    <div class="container px-4 px-lg-5 my-5">
        <div class="text-center text-white">
            <h1 class="display-4 fw-bolder">Shop in style</h1>
            <p class="lead fw-normal text-white-50 mb-0">With insane discount</p>
        </div>
    </div>
</header>

<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container px-4 px-lg-5">
        <form class="d-flex">
            <select class="form-select me-2" @onchange="OnCategoryChanged">
                <option value="All">All Categories</option>
                @foreach (var category in Categories)
                {
                    <option value="@category">@category</option>
                }
            </select>
            <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search"
                @oninput="OnSearchChanged">
            <label class="me-2 sort-text">Sort by Price:</label>
            <button class="me-2 btn btn-outline-secondary" type="button" @onclick="OnSortOrderChanged">
                <div class="sort-text">
                    @if (isPriceAscending)
                    {
                        <span>Low to High</span>
                    }
                    else
                    {
                        <span>High to Low</span>
                    }
                </div>
            </button>
            <input class="form-control me-2" type="number" placeholder="Min Price" @oninput="OnMinPriceChanged">
            <input class="form-control me-2" type="number" placeholder="Max Price" @oninput="OnMaxPriceChanged">
            <button class="btn btn-outline-secondary" type="button" @onclick="OnStockChanged">
                <div class="sort-text">
                    @if (isInStock)
                    {
                        <span>Available</span>
                    }
                    else
                    {
                        <span>Out of Stock</span>
                    }
                </div>
            </button>

        </form>
    </div>
</nav>

<section class="py-5">
    <div class="container px-4 px-lg-5 mt-5">
        <div class="row gx-4 gx-lg-5 row-cols-2 row-cols-md-3 row-cols-xl-4 justify-content-center">
            @foreach (var product in Products)
            {
                <div class="col mb-5">
                    <div class="card h-100">
                        <div class="position-relative">
                            <img class="card-img-top"
                                src="@(!string.IsNullOrEmpty(product.ImageUri) ? product.ImageUri : "https://dummyimage.com/450x300/dee2e6/6c757d.jpg")"
                                width="300" height="165" alt="..." />
                            @if (product.QtyInStock == 0)
                            {
                                <div class="card-badge badge rounded-pill text-bg-dark">Sold Out</div>
                            }
                        </div>

                        <div class="card-body p-4">
                            <div class="text-center">
                                <h5 class="fw-bolder">@product.Name</h5>
                                $@product.UnitPrice
                            </div>
                        </div>
                        <div class="card-footer p-4 pt-0 border-top-0 bg-transparent">
                            <div class="text-center">
                                @if (isUserSignedIn)
                                {
                                    <button class="btn btn-outline-dark mt-auto" @onclick="() => AddToCartAsync(product.Id)"
                                        disabled="@(product.QtyInStock == 0)">Add to Cart</button>
                                }
                                else
                                {
                                    <NavLink class="btn btn-outline-dark mt-auto" href="Identity/Account/Login">Add to Cart
                                    </NavLink>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</section>

<style scoped>
    #signin-container {
        padding: 0 300px;
        height: 70dvh;
    }

    .card-badge {
        display: block;
        position: absolute;
        left: 0.25rem;
        bottom: 0.25rem;
    }

    .flex-grow-4 {
        flex-grow: 4;
    }

    .sort-text {
        white-space: nowrap;
        align-self: center;
    }
</style>
